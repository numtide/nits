// Code generated by "enumer -type=DeployAction -output=deploy_action.go -json"; DO NOT EDIT.

package nixos

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _DeployActionName = "SwitchBootTestDryActivate"

var _DeployActionIndex = [...]uint8{0, 6, 10, 14, 25}

const _DeployActionLowerName = "switchboottestdryactivate"

func (i DeployAction) String() string {
	if i < 0 || i >= DeployAction(len(_DeployActionIndex)-1) {
		return fmt.Sprintf("DeployAction(%d)", i)
	}
	return _DeployActionName[_DeployActionIndex[i]:_DeployActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DeployActionNoOp() {
	var x [1]struct{}
	_ = x[Switch-(0)]
	_ = x[Boot-(1)]
	_ = x[Test-(2)]
	_ = x[DryActivate-(3)]
}

var _DeployActionValues = []DeployAction{Switch, Boot, Test, DryActivate}

var _DeployActionNameToValueMap = map[string]DeployAction{
	_DeployActionName[0:6]:        Switch,
	_DeployActionLowerName[0:6]:   Switch,
	_DeployActionName[6:10]:       Boot,
	_DeployActionLowerName[6:10]:  Boot,
	_DeployActionName[10:14]:      Test,
	_DeployActionLowerName[10:14]: Test,
	_DeployActionName[14:25]:      DryActivate,
	_DeployActionLowerName[14:25]: DryActivate,
}

var _DeployActionNames = []string{
	_DeployActionName[0:6],
	_DeployActionName[6:10],
	_DeployActionName[10:14],
	_DeployActionName[14:25],
}

// DeployActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DeployActionString(s string) (DeployAction, error) {
	if val, ok := _DeployActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DeployActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DeployAction values", s)
}

// DeployActionValues returns all values of the enum
func DeployActionValues() []DeployAction {
	return _DeployActionValues
}

// DeployActionStrings returns a slice of all String values of the enum
func DeployActionStrings() []string {
	strs := make([]string, len(_DeployActionNames))
	copy(strs, _DeployActionNames)
	return strs
}

// IsADeployAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DeployAction) IsADeployAction() bool {
	for _, v := range _DeployActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DeployAction
func (i DeployAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DeployAction
func (i *DeployAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DeployAction should be a string, got %s", data)
	}

	var err error
	*i, err = DeployActionString(s)
	return err
}
